version: "3.8"

volumes:
  lago_postgres_data:
  lago_redis_data:


services:
  traefik:
    image: "traefik:v2.5.4"
    container_name: lago_traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml
      - ./traefik/certs:/etc/certs
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.lago.dev`)"
      - "traefik.http.routers.traefik.entrypoints=web,websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  db:
    image: postgres:14.0-alpine
    container_name: lago-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lago}
      POSTGRES_USER: ${POSTGRES_USER:-lago}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - lago_postgres_data:/data/postgres
    ports:
      - ${POSTGRES_PORT:-5432}:5432

  redis:
    image: redis:6.2-alpine
    container_name: lago-redis
    restart: unless-stopped
    volumes:
      - lago_redis_data:/data
    ports:
      - ${REDIS_PORT:-6379}:6379

  api:
    container_name: lago-api
    image: getlago/api:v0.4.0-alpha
    restart: unless-stopped
    depends_on:
      - db
      - redis
    command: [ "./scripts/start.sh" ]
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-lago}:${POSTGRES_PASSWORD:-changeme}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-lago}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE:-your-secret-key-base-hex-64}
      - RAILS_ENV=production
      - SENTRY_DSN=${SENTRY_DSN}
      - LAGO_FRONT_URL=${LAGO_FRONT_URL:-http://localhost}
      - RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY} # Should be base64 encoded
      - LAGO_RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY} # Should be base64 encoded
      - LAGO_SIDEKIQ_WEB=${LAGO_SIDEKIQ_WEB}
      - ENCRYPTION_PRIMARY_KEY=${LAGO_ENCRYPTION_PRIMARY_KEY:-your-encrpytion-primary-key}
      - ENCRYPTION_DETERMINISTIC_KEY=${LAGO_ENCRYPTION_DETERMINISTIC_KEY:-your-encrpytion-deterministic-key}
      - ENCRYPTION_KEY_DERIVATION_SALT=${LAGO_ENCRYPTION_KEY_DERIVATION_SALT:-your-encrpytion-derivation-salt}
      - LAGO_USE_AWS_S3=${LAGO_USE_AWS_S3:-false}
      - LAGO_AWS_S3_ACCESS_KEY_ID=${LAGO_AWS_S3_ACCESS_KEY_ID:-azerty123456}
      - LAGO_AWS_S3_SECRET_ACCESS_KEY=${LAGO_AWS_S3_SECRET_ACCESS_KEY:-azerty123456}
      - LAGO_AWS_S3_REGION=${LAGO_AWS_S3_REGION:-us-east-1}
      - LAGO_AWS_S3_BUCKET=${LAGO_AWS_S3_BUCKET:-bucket}
      - LAGO_PDF_URL=${LAGO_PDF_URL:-http://pdf:3000}
      - LAGO_REDIS_CACHE_URL=redis://${LAGO_REDIS_CACHE_HOST:-redis}:${LAGO_REDIS_CACHE_PORT:-6379}
      - LAGO_DISABLE_SEGMENT=${LAGO_DISABLE_SEGMENT}
    ports:
      - ${API_PORT:-3000}:3000
    # Using traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_http.rule=Host(`api.lago.dev`)"
      - "traefik.http.routers.api_http.entrypoints=web"
      - "traefik.http.routers.api_http.service=api_http"
      - "traefik.http.services.api_http.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.rule=Host(`api.lago.dev`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=3000"

  front:
    container_name: lago-front
    image: getlago/front:v0.4.0-alpha
    restart: unless-stopped
    # Use this command if you want to use SSL with Let's Encrypt
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - api
    environment:
      - API_URL=${LAGO_API_URL:-http://localhost:3000}
      - APP_ENV=${APP_ENV:-production}
      - CODEGEN_API=${LAGO_API_URL:-http://localhost:3000}
      - LAGO_DISABLE_SIGNUP=${LAGO_DISABLE_SIGNUP}
    # ports:
    #   - ${FRONT_PORT:-80}:80
    #   # - 443:443
    # Using traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app.lago.dev`)"
      - "traefik.http.routers.app.entrypoints=web,ws,websecure"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.services.app.loadbalancer.server.port=8080"
    # Using SSL with Let's Encrypt
    # volumes:
    #   - ./extra/nginx-letsencrypt.conf:/etc/nginx/conf.d/default.conf
    #   - ./extra/certbot/conf:/etc/letsencrypt
    #   - ./extra/certbot/www:/var/www/certbot
    # Using SSL with self signed certificates
    # volumes:
    #   - ./extra/nginx-selfsigned.conf:/etc/nginx/conf.d/default.conf
    #   - ./extra/ssl/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt
    #   - ./extra/ssl/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key
    #   - ./extra/ssl/dhparam.pem:/etc/ssl/certs/dhparam.pem

    # Only used for SSL support with Let's Encrypt
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./extra/certbot/conf:/etc/letsencrypt
      - ./extra/certbot/www:/var/www/certbot

  api-worker:
    container_name: lago-worker
    image: getlago/api:v0.4.0-alpha
    restart: unless-stopped
    depends_on:
      - api
    command: [ "./scripts/start.worker.sh" ]
    environment:
      - LAGO_API_URL=${LAGO_API_URL:-http://localhost:3000}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-lago}:${POSTGRES_PASSWORD:-changeme}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-lago}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE:-your-secret-key-base-hex-64}
      - RAILS_ENV=production
      - SENTRY_DSN=${SENTRY_DSN}
      - LAGO_RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY} # Should be base64 encoded
      - RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY} # Should be base64 encoded
      - ENCRYPTION_PRIMARY_KEY=${LAGO_ENCRYPTION_PRIMARY_KEY:-your-encrpytion-primary-key}
      - ENCRYPTION_DETERMINISTIC_KEY=${LAGO_ENCRYPTION_DETERMINISTIC_KEY:-your-encrpytion-deterministic-key}
      - ENCRYPTION_KEY_DERIVATION_SALT=${LAGO_ENCRYPTION_KEY_DERIVATION_SALT:-your-encrpytion-derivation-salt}
      - LAGO_USE_AWS_S3=${LAGO_USE_AWS_S3:-false}
      - LAGO_AWS_S3_ACCESS_KEY_ID=${LAGO_AWS_S3_ACCESS_KEY_ID:-azerty123456}
      - LAGO_AWS_S3_SECRET_ACCESS_KEY=${LAGO_AWS_S3_SECRET_ACCESS_KEY:-azerty123456}
      - LAGO_AWS_S3_REGION=${LAGO_AWS_S3_REGION:-us-east-1}
      - LAGO_AWS_S3_BUCKET=${LAGO_AWS_S3_BUCKET:-bucket}
      - LAGO_PDF_URL=${LAGO_PDF_URL:-http://pdf:3000}
      - LAGO_REDIS_CACHE_URL=redis://${LAGO_REDIS_CACHE_HOST:-redis}:${LAGO_REDIS_CACHE_PORT:-6379}
      - LAGO_DISABLE_SEGMENT=${LAGO_DISABLE_SEGMENT}

  api-clock:
    container_name: lago-clock
    image: getlago/api:v0.4.0-alpha
    restart: unless-stopped
    depends_on:
      - api
    command: [ "./scripts/start.clock.sh" ]
    environment:
      - LAGO_API_URL=${LAGO_API_URL:-http://localhost:3000}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-lago}:${POSTGRES_PASSWORD:-changeme}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-lago}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE:-your-secret-key-base-hex-64}
      - RAILS_ENV=production
      - SENTRY_DSN=${SENTRY_DSN}
      - LAGO_RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY} # Should be base64 encoded
      - RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY} # Should be base64 encoded
      - ENCRYPTION_PRIMARY_KEY=${LAGO_ENCRYPTION_PRIMARY_KEY:-your-encrpytion-primary-key}
      - ENCRYPTION_DETERMINISTIC_KEY=${LAGO_ENCRYPTION_DETERMINISTIC_KEY:-your-encrpytion-deterministic-key}
      - ENCRYPTION_KEY_DERIVATION_SALT=${LAGO_ENCRYPTION_KEY_DERIVATION_SALT:-your-encrpytion-derivation-salt}
    # Using traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pdf.rule=Host(`pdf.lago.dev`)"
      - "traefik.http.routers.pdf.entrypoints=web,websecure"
      - "traefik.http.routers.pdf.tls=true"
      - "traefik.http.services.pdf.loadbalancer.server.port=3000"

  pdf:
    image: gotenberg/gotenberg:7
